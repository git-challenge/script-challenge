name: Python app - Flow PR report

on:
  pull_request:
    branches: ["main", "develop"]
    types: ["opened", "synchronize", "reopened"]
    paths: ["config/queries.yml"]

permissions:
  contents: read
  actions: write
  pull-requests: write

# Cancela el run anterior de la misma PR
concurrency:
  group: pr-preview-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  MAX_RUNTIME: 300

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.one_block.outputs.matrix }}

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "**/requirements.txt"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Build matrix from "config/queries.yml"
        id: one_block
        run: |
          python <<'PY'
          import yaml, os, json
          cfg = yaml.safe_load(open("config/queries.yml", "r", encoding="utf-8")) or {}
          names = [item['name'] for item in cfg.get('reports', [])]
          print("Matrix names:", names)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_output:
              gh_output.write(f"matrix={json.dumps({'name': names})}\n")
          PY

  build:
    needs: set-matrix
    runs-on: ubuntu-latest
    environment: develop

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "**/requirements.txt"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build single-report "config/queries.yml"
        run: |
          python <<'PY'
          import yaml
          name = "${{ matrix.name }}"
          cfg = yaml.safe_load(open("config/queries.yml", "r", encoding="utf-8")) or {}
          rep = [report for report in (cfg.get("reports") or []) if report.get("name") == name]
          if not rep:
              raise SystemExit(f"No se encontr√≥ 'name={name}' en config/queries.yml")
          cfg["reports"] = rep
          open("config/_one.yml", "w", encoding="utf-8").write(
              yaml.safe_dump(cfg, sort_keys=False, allow_unicode=True)
          )
          PY

      - name: Run python script (dry-run) with retries/backoff
        shell: bash
        env:
          NAME: ${{ matrix.name }}
          API_URL: ${{ secrets.API_URL }}
        run: |
          set -euo pipefail
          attempts=3
          delay=2
          start=$(date +%s)
          cmd=(python ./artworks-report.py --config "config/_one.yml" --out "out/${NAME}" --dry-run)

          for ((i=1;i<=attempts;i++)); do
            echo "ü§ñ Ejecutando intento $i/${attempts} ‚Üí ${cmd[*]}"
            if "${cmd[@]}"; then
              echo "‚úÖ √âxito en el intento $i"
              break
            fi

            now=$(date +%s)
            elapsed=$(( now - start ))
            if (( elapsed >= ${MAX_RUNTIME} )); then
              echo "‚è±Ô∏è Tiempo excedido (MAX_RUNTIME=${MAX_RUNTIME}s). Abortando."
              exit 1
            fi

            if (( i < attempts )); then
              echo "‚ö†Ô∏è Fall√≥ intento $i. Esperando ${delay}s antes de reintentar‚Ä¶"
              sleep "${delay}"
              delay=$(( delay * 2 ))
            else
              echo "‚ùå Todos los intentos fallaron."
              exit 1
            fi
          done

      - name: Upload artifact (one report)
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ matrix.name }}              
          path: out/${{ matrix.name }}                  
          if-no-files-found: error
          retention-days: 15

  summarize:
    needs: build
    runs-on: ubuntu-latest
    if: always()

    permissions: 
      contents: read
      actions: read
      pull-requests: write

    env:
      GH_TOKEN: ${{ github.token }}                        
      PR_NUMBER: ${{ github.event.pull_request.number }}
    
    steps:
      - name: Prepare workspace
        run: mkdir -p out

      - name: Download all report artifacts
        uses: actions/download-artifact@v5                 
        with:
          pattern: reports-*                                
          path: out                                         
          # merge-multiple: false                          

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      # üîé Construye un comentario HTML a partir de <name>.json | summary.json | primer *.json
      - name: Build PR comment (HTML) with gh
        shell: bash
        env:
          PREVIEW_COLUMNS: "id,name"     
          PREVIEW_HEADERS: "ID,Nombre"
          PREVIEW_LIMIT: "10"
        run: |
          set -euo pipefail
          cols="${PREVIEW_COLUMNS:-id,name}"
          headers="${PREVIEW_HEADERS:-}"
          limit="${PREVIEW_LIMIT:-10}"

          {
            echo "<!-- report-preview-marker -->"
            echo "### üßæ Previsualizaci√≥n de reportes"
            echo
            echo "<details><summary>Ver tablas (m√°x. ${limit} filas por reporte)</summary>"
            echo
          } > pr_comment.md

          shopt -s nullglob
          for d in out/reports-*/ ; do
            artifact="$(basename "$d")"           # e.g., reports-war-art
            name="${artifact#reports-}"           # -> war-art

            # Selecci√≥n del JSON a previsualizar (prioridad)
            js="${d%/}/${name}.json"
            if [[ ! -f "$js" ]]; then
              js="${d%/}/summary.json"
            fi
            if [[ ! -f "$js" ]]; then
              js="$(ls "${d%/}"/*.json 2>/dev/null | head -n 1 || true)"
            fi
            [[ -f "$js" ]] || continue

            # Cabeceras HTML
            {
              echo ""
              echo "#### ${name}"
              echo "<table><thead><tr>"
            } >> pr_comment.md

            IFS=, read -ra c <<< "$cols"
            if [[ -n "$headers" ]]; then
              IFS=, read -ra h <<< "$headers"
            else
              h=("${c[@]}")
            fi
            for th in "${h[@]}"; do printf '<th>%s</th>' "$th" >> pr_comment.md; done
            echo "</tr></thead><tbody>" >> pr_comment.md

            # Filas desde el JSON: soporta ra√≠z array o {data:[...]} o {items:[...]}
            jq -r --arg cols "$cols" --argjson limit "$limit" '
              def h: tostring|@html;
              def rows:
                if (type=="array") then .
                elif has("data") then .data
                elif has("items") then .items
                else [] end ;
              (rows | .[:$limit])[] as $row
              | ($cols | split(",")) as $cols
              | "<tr>" + ( $cols
                  | map( "<td>" + ( $row[.] // "" | tostring | h ) + "</td>" )
                  | join("") ) + "</tr>"
            ' "$js" >> pr_comment.md

            echo "</tbody></table>" >> pr_comment.md

            # Nota de archivos producidos (no se puede linkear directo al archivo del artifact)
            echo "<sub>Archivos: <code>${name}.pdf</code>, <code>${name}.json</code>, <code>summary.json</code>, <code>*.html</code> (descarga desde los artifacts de este run).</sub>" >> pr_comment.md
          done

          {
            echo
            echo "</details>"
            echo
            echo "<sub>Descarga los PDFs/JSON completos desde los artifacts <i>reports-&lt;name&gt;</i> de este run.</sub>"
          } >> pr_comment.md

          # Publica/actualiza comentario pegajoso
          OWNER="${GITHUB_REPOSITORY%%/*}"
          REPO="${GITHUB_REPOSITORY##*/}"
          MARK="<!-- report-preview-marker -->"

          CID="$(gh api repos/$OWNER/$REPO/issues/$PR_NUMBER/comments \
                --jq '[.[] | select(.user.type == "Bot" and (.body|contains("'"$MARK"'")))] | .[0].id' \
                | tr -d '\n' || true)"

          if [[ -n "${CID}" && "${CID}" != "null" ]]; then
            echo "üîÅ Actualizando comentario existente ($CID)‚Ä¶"
            gh api --method PATCH -H "Accept: application/vnd.github+json" \
              /repos/$OWNER/$REPO/issues/comments/$CID \
              -f body="$(cat pr_comment.md)"
          else
            echo "üÜï Creando comentario nuevo‚Ä¶"
            gh api --method POST -H "Accept: application/vnd.github+json" \
              /repos/$OWNER/$REPO/issues/$PR_NUMBER/comments \
              -f body="$(cat pr_comment.md)"
          fi

      # (Opcional) Tambi√©n deja un peque√±o resumen en el panel del run
      - name: Action Summary (conteo por reporte)
        shell: bash
        run: |
          echo "## Items por reporte" >> $GITHUB_STEP_SUMMARY
          shopt -s nullglob
          for d in out/reports-*/ ; do
            artifact="$(basename "$d")"
            name="${artifact#reports-}"
            js="${d%/}/${name}.json"
            if [[ ! -f "$js" ]]; then
              js="${d%/}/summary.json"
            fi
            if [[ ! -f "$js" ]]; then
              js="$(ls "${d%/}"/*.json 2>/dev/null | head -n 1 || true)"
            fi
            [[ -f "$js" ]] || continue
            count="$(jq -r '
              if (type=="array") then length
              elif has("data") then (.data|length)
              elif has("items") then (.items|length)
              else 0 end
            ' "$js")"
            echo "- **${name}**: ${count} √≠tems" >> $GITHUB_STEP_SUMMARY
          done
