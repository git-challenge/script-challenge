name: Python application

on:
  pull_request:
    branches: ["main", "develop"]
    types: ["opened", "synchronize", "reopened"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: develop

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "./requirements.txt"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # üîê Exporta API_URL desde el Environment "develop".
      - name: Export API_URL from environment secret
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false }}
        run: |
          # Usa el que exista: API_URL o URL_PATH (mapea a API_URL)
          if [[ -n "${{ secrets.API_URL }}" ]]; then
            echo "API_URL=${{ secrets.API_URL }}" >> "$GITHUB_ENV"
          elif [[ -n "${{ secrets.URL_PATH }}" ]]; then
            echo "API_URL=${{ secrets.URL_PATH }}" >> "$GITHUB_ENV"
          else
            echo "‚ùå No se encontr√≥ el secreto API_URL ni URL_PATH en el environment 'develop'." >&2
            exit 1
          fi

      # ‚úÖ Chequeo de presencia
      - name: Sanity check API_URL (internal only)
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false }}
        run: |
          if [[ -z "${API_URL:-}" ]]; then
            echo "‚ùå API_URL no est√° disponible"; exit 1
          fi
          echo "API_URL presente ‚úÖ (valor oculto)"

      # ‚ñ∂Ô∏è Ejecuta de verdad cuando NO es PR de fork
      - name: Run application (real run for internal PRs/branches)
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false }}
        env:
          API_URL: ${{ secrets.API_URL }}
          URL_PATH: ${{ secrets.API_URL }}
        run: |
          python ./artworks-report.py --config "config/test.yml" --out out --dry-run

      - name: Verify outputs
        run: |
          set -euo pipefail
          if [ ! -d out ]; then
            echo "‚ùå Upss... No existe el directorio out"
            exit 1
          fi

          shopt -s nullglob
          json=(out/*.json)
          pdf=(out/*.pdf)

          echo "üìÑ JSON encontrados: ${#json[@]} -> ${json[@]:-}"
          echo "üìÑ PDF  encontrados: ${#pdf[@]}  -> ${pdf[@]:-}"

          if (( ${#json[@]} != 1 )); then
            echo "‚ùå Se esperaba exactamente 1 archivo .json en 'out/'."; ls -l out || true; exit 1
          fi
          if (( ${#pdf[@]} != 1 )); then
            echo "‚ùå Se esperaba exactamente 1 archivo .pdf en 'out/'."; ls -l out || true; exit 1
          fi

          echo "‚úÖ Validaci√≥n OK"
